import java.util.*;

public class Solution {
	public int depthSum(List<NestedInteger> nestedList) {
	    return helper(nestedList,1);
	}
	private int helper(List<NestedInteger> list, int depth){
		int res=0;
		for(NestedInteger cur:list){
			res+=cur.isInteger()?cur.getInteger()*depth:helper(cur.getList(),depth+1);
		}
		return res;
	}
	public int depthSumIII(List<NestedInteger> nestedList) {
	    int unweighted=0, weighted=0;
	    while(!nestedList.isEmpty()){
	    	List<NestedInteger> nextLevel=new ArrayList<>();
	    	for(NestedInteger ni:nextLevel){
	    		if(ni.isInteger()){
	    			unweighted+=ni.getInteger();
	    		}else{
	    			nextLevel.addAll(ni.getList());
	    		}
	    	}
	    	weighted+=unweighted;
	    	nestedList=nextLevel;
	    }
	    return weighted;
	}
	public int depthSumII(List<NestedInteger> nestedList) {
		if(nestedList==null)	return 0;
		Queue<NestedInteger> queue=new LinkedList<NestedInteger>();
		int pre=0;
		int total=0;
		for(NestedInteger next:nestedList){
			queue.offer(next);
		}
		while(!queue.isEmpty()){
			int size=queue.size();
			for(int i=0;i<size;i++){
				NestedInteger cur=queue.poll();
				if(cur.isInteger()) pre+=cur.getInteger();
				else{
					for(NestedInteger next:cur.getList()){
						queue.offer(next);
					}
				}
			}
			total+=pre;
		}
		return total;
	}
	public int depthSumIV(List<NestedInteger> nestedList) {
		if(nestedList==null)	return 0;
		List<Integer> levelSum=new ArrayList<>();
		for(NestedInteger cur:nestedList){
			dfs(cur,0,levelSum);
		}
		int sum=0;
		for(int i=levelSum.size()-1,level=1;i>=0;i--,level++){
			sum+=levelSum.get(i)*level;
		}
		return sum;
	}
	private void dfs(NestedInteger cur, int depth, List<Integer> levelSum){
		  if(levelSum.size()<depth+1) levelSum.add(0);
		  if(cur.isInteger()) {
	            levelSum.set(depth, levelSum.get(depth)+cur.getInteger());
	        }else{
	            for(NestedInteger element: cur.getList()) {
	                dfs(element, depth+1, levelSum);
	            }
	        }
	}
}
